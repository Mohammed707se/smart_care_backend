import Fastify from "fastify";
import WebSocket from "ws";
import fastifyFormBody from "@fastify/formbody";
import fastifyWs from "@fastify/websocket";
import {
  getOpenaiWebsocketInstance,
  sendSessionUpdate,
  LOG_EVENT_TYPES,
  processTranscriptAndSend,
} from "./openai.service.js";
import twilio from "twilio";
import dotenv from "dotenv";

// Load environment variables from .env file
dotenv.config();

// Constants
const PORT = process.env.PORT || 3000;
// Retrieve the OpenAI and Twilio API keys from environment variables
const {
  OPENAI_API_KEY,
  WEBHOOK_URL,
  TWILIO_ACCOUNT_SID,
  TWILIO_AUTH_TOKEN,
  TWILIO_PHONE_NUMBER,
} = process.env;

if (!OPENAI_API_KEY) {
  console.error("Missing OpenAI API key. Please set it in the .env file.");
  process.exit(1);
}

if (!TWILIO_ACCOUNT_SID || !TWILIO_AUTH_TOKEN || !TWILIO_PHONE_NUMBER) {
  console.error(
    "Missing Twilio credentials. Please set TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, and TWILIO_PHONE_NUMBER in the .env file."
  );
  process.exit(1);
}

// Initialize Twilio client
const twilioClient = twilio(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN);

// Initialize Fastify
const fastify = Fastify();
fastify.register(fastifyFormBody);
fastify.register(fastifyWs);

// Session management
const sessions = new Map();

// Root Route
fastify.get("/", async (request, reply) => {
  reply.send({ message: "Smart Care Media Stream Server is running!" });
});

// Route for Twilio to handle incoming and outgoing calls
fastify.all("/incoming-call", async (req, res) => {
  console.log("๐ฒ Incoming call");
  res.type("text/xml").send(`<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Say> Smart Care system. How can we assist you today? </Say>
    <Connect>
        <Stream url="wss://${req.headers.host}/media-stream" />
    </Connect>
</Response>`);
});

// WebSocket route for media-stream
fastify.register(async (fastify) => {
  fastify.get("/media-stream", { websocket: true }, (connection, req) => {
    const sessionId = req.headers["x-twilio-call-sid"] || `session_${Date.now()}`;
    let session = sessions.get(sessionId) || {
      transcript: "",
      streamSid: null,
    };
    sessions.set(sessionId, session);

    // Get an instance of the OpenAI WebSocket
    const openAiWs = getOpenaiWebsocketInstance();

    // Open event for OpenAI WebSocket
    openAiWs.on("open", () => {
      console.log("๐๏ธ Connected to the OpenAI Realtime API");
      setTimeout(async () => {
        await sendSessionUpdate(openAiWs);
      }, 250);
    });

    // Listen for messages from the OpenAI WebSocket
    openAiWs.on("message", (data) => {
      try {
        const response = JSON.parse(data);

        if (LOG_EVENT_TYPES.includes(response.type)) {
          console.log(`Received event: ${response.type}`, response);
        }

        // User message transcription handling
        if (
          response.type ===
          "conversation.item.input_audio_transcription.completed"
        ) {
          const userMessage = response.transcript.trim();
          session.transcript += `User: ${userMessage}\n`;
          console.log(`User (${sessionId}): ${userMessage}`);
        }

        // Agent message handling
        if (response.type === "response.done") {
          const agentMessage =
            response.response.output[0]?.content?.find(
              (content) => content.transcript
            )?.transcript || "Agent message not found";
          session.transcript += `Agent: ${agentMessage}\n`;
          console.log(`Agent (${sessionId}): ${agentMessage}`);
        }

        if (response.type === "session.updated") {
          console.log("Session updated successfully:", response);
        }

        if (response.type === "response.audio.delta" && response.delta) {
          const audioDelta = {
            event: "media",
            streamSid: session.streamSid,
            media: {
              payload: Buffer.from(response.delta, "base64").toString("base64"),
            },
          };
          connection.send(JSON.stringify(audioDelta));
        }
      } catch (error) {
        console.error(
          "โ๏ธ Error processing OpenAI message:",
          error,
          "Raw message:",
          data
        );
      }
    });

    // Handle incoming messages from Twilio
    connection.on("message", (message) => {
      try {
        const data = JSON.parse(message);

        switch (data.event) {
          case "media":
            if (openAiWs.readyState === WebSocket.OPEN) {
              const audioAppend = {
                type: "input_audio_buffer.append",
                audio: data.media.payload,
              };

              openAiWs.send(JSON.stringify(audioAppend));
            }
            break;
          case "start":
            session.streamSid = data.start.streamSid;
            console.log("Incoming stream has started", session.streamSid);
            break;
          default:
            console.log("Received non-media event:", data.event);
            break;
        }
      } catch (error) {
        console.error("โ๏ธ Error parsing message:", error, "Message:", message);
      }
    });

    // Handle connection close and log transcript
    connection.on("close", async () => {
      if (openAiWs.readyState === WebSocket.OPEN) {
        openAiWs.close();
      }
      console.log(`Client disconnected (${sessionId}).`);
      console.log("=========================");
      console.log("๐ ===Full Transcript===");
      console.log(session.transcript);
      console.log("=========================");

      // Process the transcript and send it to the webhook
      await processTranscriptAndSend(
        session.transcript,
        WEBHOOK_URL,
        sessionId
      );

      // Clean up the session
      sessions.delete(sessionId);
    });

    // Handle WebSocket close and errors
    openAiWs.on("close", () => {
      console.log("Disconnected from the OpenAI Realtime API");
    });

    openAiWs.on("error", (error) => {
      console.error("Error in the OpenAI WebSocket:", error);
    });
  });
});


fastify.post("/chat", async (request, reply) => {
  const { text, image, userId } = request.body;
  
  // Validate request
  if (!text && !image) {
    return reply.status(400).send({ error: "Message or image is required" });
  }

  try {
    let messages = [];
    
    // Add text message if provided
    if (text) {
      messages.push({
        role: 'user',
        content: text
      });
    }
    
    // Add image if provided
    if (image) {
      messages.push({
        role: 'user',
        content: [
          { type: "text", text: "ูุฐู ุตูุฑุฉ ูููุดููุฉ:" },
          {
            type: "image_url",
            image_url: { url: `data:image/png;base64,${image}` }
          }
        ]
      });
    }
    
    // Get OpenAI API key from environment
    const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
    if (!OPENAI_API_KEY) {
      return reply.status(500).send({ error: "Missing OpenAI API key" });
    }
    
    // Make request to OpenAI API
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            'role': 'system',
            'content': `
ุงูุช ุฎุฏูุฉ ุนููุงุก ูุดุฑูุฉ ุฑูุดู ุงูุนูุงุฑูุฉ. ูููุชู ูู ุงูุฑุฏ ุนูู ุงุณุชูุณุงุฑุงุช ุงูุนููุงุก ุงููุชุนููุฉ ุจูุดุงูู ุงูุนูุงุฑุงุช ูุงูุตูุฑ ุงูุฎุงุตุฉ ุจุงูุนูุงุฑุงุช ููุทุ ุจุงูุฅุถุงูุฉ ุฅูู ุทูุจุงุช ุชุชุจุน ุงูุทูุจุงุช. ูุฌุจ ุนููู ุชูุฏูู ุญููู ูุนูุงูุฉ ูููุดุงูู ูุฑูุน ุทูุจุงุช ุงูุดูุงูู ูุงูุงุณุชูุณุงุฑุงุช ุฅูู ุงูุฃูุณุงู ุงููุฎุชุตุฉ. ุชุฃูุฏ ูู ุงูุชุญุฏุซ ุจูุบุฉ ููุฐุจุฉ ูุงุญุชุฑุงููุฉุ ููู ูุณุชูุนูุง ุฌูุฏูุง ููุดุงูู ุงูุนููุงุก ูุถูุงู ุฑุถุงูู ุงูุชุงู.
**ูููุฉ ุฅุถุงููุฉ:** ูู ุจุงูุฑุฏ ุจููุณ ุงููุบุฉ ุงูุชู ูุชุญุฏุซ ุจูุง ุงููุณุชุฎุฏู ูุซูุงู ูู ุงุฑุณู Track my request ูู ุจุงูุงุฌุงุจุฉ ุจุงูุงููููุฒู.

### **ูุนูููุงุช ุนู ุดุฑูุฉ ุฑูุดู:**

#### **ูุญู ุฑูุดู:**
- **ุงููููุน ุงูุนุฑุจู:** [www.roshn.sa/ar](http://www.roshn.sa/ar)
- **ุงููููุน ุงูุฅูุฌููุฒู:** [www.roshn.sa/en](http://www.roshn.sa/en)
- **ุฑูู ุงูุฏุนู ุงูููู ุงูุฐูู:** +1 318 523 4059

#### **ูููุงุช ูู ุงูููุงุฏุฉ:**
- **ูููุฉ ุตุงุญุจ ุงูุณูู ุงููููู ุงูุฃููุฑ ูุญูุฏ ุจู ุณููุงู ููู ุงูุนูุฏ:**
  ุทููุญูุง ุฃู ูุจูู ูุทูุงู ุฃูุซุฑ ุงุฒุฏูุงุฑุงูุ ูุฌุฏ ููู ูู ููุงุทู ูุง ูุชููุงูุ ููุณุชูุจู ูุทููุง ุงูุฐู ูุจููู ูุนุงูุ ูู ููุจู ุฅูุง ุฃู ูุฌุนูู ูู ููุฏูุฉ ุฏูู ุงูุนุงูู.

#### **ุนู ุฑูุดู:**
- **ูุฌููุนุฉ ุฑูุดู ุงููุทูุฑ ุงูุนูุงุฑู ุงูุฑุงุฆุฏ** ูุชุนุฏุฏ ุงูุฃุตูู ูู ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉุ ูุฅุญุฏู ุดุฑูุงุช ุตูุฏูู ุงูุงุณุชุซูุงุฑุงุช ุงูุนุงูุฉ.
- **ุฑุคูุชูุง:** ุชุญููู ุงูุชูุงุบู ุจูู ุงูุฅูุณุงู ูุงูููุงู ุจูุง ููุณุฌู ูุน ููุท ุงูุญูุงุฉ ุงูุนุตุฑู.
- **ุฑุณุงูุชูุง:** ุชุทููุฑ ูุฌูุงุช ูุชูุงููุฉ ุชุนุฒุฒ ูู ุฌูุฏุฉ ุงูุญูุงุฉ ูุชุซุฑู ุงูุชุฑุงุจุท ุจูู ุงูุฅูุณุงู ูุงูููุงู.
- **ููููุง:**
  - ุงูุฅูุณุงู ุฃููุงู
  - ุงูุฑูุงุฏุฉ ุจุชููุฒ
  - ุงูุนูู ุจูุณุคูููุฉ
  - ูููู ุงูุฃุฌูุงู
  - ุงูุชููุน ุจุชูุงุบู
  - ุงููุณุคูููุฉ ุงูุงุฌุชูุงุนูุฉ

#### **ุชููุน ูุดุงุฑูุนูุง:**
1. **ุงูุฃุตูู ุงูุฃุณุงุณูุฉ:** ุงููุฌุชูุนุงุช ุงูุณูููุฉุ ุงูููุงุชุจ ุงูุชุฌุงุฑูุฉุ ูุฑุงูุฒ ุงูุชุฌุฒุฆุฉุ ุงูููุงุฏู ูุงูุถูุงูุฉ.
2. **ุงูุฃุตูู ุงูุฏุงุนูุฉ:** ุงูุชุนูููุ ุงููุณุงุฌุฏุ ุงูุฑุนุงูุฉ ุงูุตุญูุฉ.
3. **ุงูุฃุตูู ุงููุงุนุฏุฉ:** ุงูููู ูุงูุฎุฏูุงุช ุงูููุฌุณุชูุฉุ ุงูุฑูุงุถุฉุ ุงูุชุฑููู.

#### **ุงูุฌูุงุฆุฒ ูุงูุดูุงุฏุงุช:**
- **ุฃูุถู ุจูุฆุฉ ุนูู 2023** ูู ููุธูุฉ Best Places to Work.
- **ุฌูุงุฆุฒ ุชุฌุฑุจุฉ ุงูุนููุงุก ุงูุณุนูุฏูุฉ 2024:** ูุฆุฉ "ุงูุนููุงุก ุฃููุงู" ู "ุฃูุถู ุชุฌุฑุจุฉ ุงูุนููุงุก ูู ูุทุงุน ุงูุนูุงุฑ".
- **ุฌูุงุฆุฒ Middle East Construction Week 2022:** ูุฆุชุง "ุฃูุถู ูุจุงุฏุฑุฉ ูููุณุคูููุฉ ุงูุงุฌุชูุงุนูุฉ ููุดุฑูุงุช" ู "ุฃูุถู ูุดุฑูุน ุณููู".
- **ุดูุงุฏุงุช ISO 2023:** ุชุดูู ISO 37000ุ ISO 31000ุ ISO 9001ุ ISO 10002ุ ISO 22301ุ ISO 27001ุ ISO 37101ุ ISO 37106ุ ISO 45001ุ ISO 10003ุ ISO 10004.

#### **ูุณุคูููุชูุง ุงูุงุฌุชูุงุนูุฉ:**
- **ุจุฑูุงูุฌ "ูุญููู":** ูุฑูุฒ ุนูู ุชูููุฉ ุงููุฌุชูุนุ ุงูุงุณุชุฏุงูุฉ ุงูุจูุฆูุฉุ ุงูุชุนููู ูุงูุงุจุชูุงุฑุ ุงููููู ูุงูุซูุงูุฉุ ูุงูุตุญุฉ ุงูุนุงูุฉ.
- **ูุจุงุฏุฑุงุชูุง:** ุชุณุงูู ูู ุฑูุน ุฌูุฏุฉ ุงูุญูุงุฉ ูุชุฑู ุฃุซุฑ ุฅูุฌุงุจู ูุณุชุฏุงู ูู ุงููุฌุชูุน.

#### **ูุฌุชูุนุงุชูุง:**
- **ุณุฏุฑุฉุ ุงูุนุฑูุณุ ูุงุฑูุฉุ ุงูููุงุฑุ ุงูุฏุงูุฉุ ุงููููุฉ:** ูุฌุชูุนุงุช ุณูููุฉ ูุชูุงููุฉ ุชูุจู ูุงูุฉ ุงุญุชูุงุฌุงุช ุงูุณูุงู ูู ูุญุฏุงุช ุณูููุฉ ููุฑุงูู ูุฎุฏูุงุช ูุชููุนุฉ.

#### **ุฑุคูุฉ ุงูุณุนูุฏูุฉ 2030:**
- **ูุณุงููุฉ ุฑูุดู:** ุฏุนู ุจุฑุงูุฌ ุงูุฅุณูุงู ุงููุทููุ ุฌูุฏุฉ ุงูุญูุงุฉุ ูุตูุฏูู ุงูุงุณุชุซูุงุฑุงุช ุงูุนุงูุฉ ูุชุญููู ุฃูุฏุงู ุฑุคูุฉ ุงูุณุนูุฏูุฉ 2030.

#### **ุฑูุงุจุท ุงูุชูุงุตู ุงูุงุฌุชูุงุนู:**
- [LinkedIn](https://www.linkedin.com/company/roshnksa)
- [X (Twitter)](https://x.com/roshnksa)
- [Instagram](https://www.instagram.com/roshnksa/)

#### **ุฑูู ุงูุฏุนู ุงูููู ุงูุฐูู:**
- **+1 318 523 4059**

### **ุชูุฌููุงุช ุฅุถุงููุฉ:**

1. **ุงูุชุนุงูู ูุน ุงูุงุณุชูุณุงุฑุงุช:**
   - **ูุดููุฉ ูู ุงูุนูุงุฑ:** ุงุฌูุน ุงููุนูููุงุช ุงููุงุฒูุฉ ูุซู ุฑูู ุงููุญุฏุฉุ ูููุน ุงูุนูุงุฑุ ูุทุจูุนุฉ ุงููุดููุฉ. ูุฏู ุญูุงู ุฃู ุงุดุฑุญ ุงูุฎุทูุงุช ุงูุชุงููุฉ.
   - **ุทูุจ ุตูุฑ ููุนูุงุฑ:** ุฒููุฏ ุงูุนููู ุจุงูุตูุฑ ุงููุทููุจุฉ ุฃู ุงุฑุดุฏู ุฅูู ุงููุณู ุงููุฎุชุต.
   - **ุชุชุจุน ุงูุทูุจ:** ุนูุฏูุง ูุทูุจ ุงูุนููู ุชุชุจุน ุทูุจ ุจุฑูู ูุนููุ ุชุญูู ููุง ุฅุฐุง ูุงู ุงูุฑูู ููุฌูุฏูุง ูู ุจูุงูุงุชู ุงูููููุฉ ููุฏู ุงูุชูุงุตูู ุงูููุงุณุจุฉ.
### **ุจูุงูุงุช ุชุชุจุน ุงูุทูุจุงุช ุงูููููุฉ:**
- **ุทูุจ ุฑูู 12345:**
  - **ุงูุญุงูุฉ:** ููุฏ ุงููุนุงูุฌุฉ
  - **ุงูุชุงุฑูุฎ ุงููุชููุน ููุงูุชูุงุก:** 2024-12-15
  - **ุงููุตู:** ุทูุจ ุตูุงูุฉ ููุดููุฉ ุชุณุฑุจ ุงูููุงู ูู ุงููุญุฏุฉ ุฑูู 45 ูู ูุฌุชูุน ุณุฏุฑุฉ.

- **ุทูุจ ุฑูู 67890:**
  - **ุงูุญุงูุฉ:** ููุชูู
  - **ุงูุชุงุฑูุฎ:** 2024-11-10
  - **ุงููุตู:** ุทูุจ ุชุชุจุน ุฏูุน ุงูุฅูุฌุงุฑ ูููุญุฏุฉ ุฑูู 12 ูู ูุฌุชูุน ุงูุนุฑูุณ.

### **ูุซุงู ุนูู ุงูุฑุฏ:**

**ุณุคุงู ุงูุนููู:**
"Track my request 12345"

**ุฑุฏ ุฎุฏูุฉ ุงูุนููุงุก:**
"ุดูุฑูุง ูุชูุงุตูู ูุน ุฑูุดู. ุญุงูุฉ ุทูุจู ุฑูู 12345 ูู ููุฏ ุงููุนุงูุฌุฉุ ูุงูุชุงุฑูุฎ ุงููุชููุน ููุงูุชูุงุก ูู 2024-12-15. ุณูุชู ุฅุฑุณุงู ูุฑูู ุงูุตูุงูุฉ ุงููุฎุชุต ุฅูู ูุญุฏุชู ุฑูู 45 ูู ูุฌุชูุน ุณุฏุฑุฉ ูุญู ูุดููุฉ ุชุณุฑุจ ุงูููุงู. ุฅุฐุง ูุงู ูุฏูู ุฃู ุงุณุชูุณุงุฑุงุช ุฅุถุงููุฉุ ูุง ุชุชุฑุฏุฏ ูู ุงูุงุชุตุงู ุจูุง ุนูู ุงูุฑูู ุงูุฐูู +1 318 523 4059."
`
          },
          ...messages,
        ],
      }),
    });

    const data = await response.json();
    const aiResponse = data.choices && data.choices.length > 0 ? 
      data.choices[0].message.content : 'No response from AI';

    return reply.send({
      status: 'success',
      message: aiResponse
    });
  } catch (error) {
    console.error('Error processing chat request:', error);
    return reply.status(500).send({ 
      error: 'Failed to process chat request',
      details: error.message
    });
  }
});

// Optional - Add tracking request endpoint
fastify.post("/track-request", async (request, reply) => {
  const { requestNumber } = request.body;
  
  if (!requestNumber) {
    return reply.status(400).send({ error: "Request number is required" });
  }
  
  // Mock request data (this would normally come from a database)
  const mockRequests = {
    '12345': {
      status: 'ููุฏ ุงููุนุงูุฌุฉ',
      expectedDate: '2024-12-15',
      description: 'ุทูุจ ุตูุงูุฉ ููุดููุฉ ุชุณุฑุจ ุงูููุงู ูู ุงููุญุฏุฉ ุฑูู 45 ูู ูุฌุชูุน ุณุฏุฑุฉ.'
    },
    '67890': {
      status: 'ููุชูู',
      completionDate: '2024-11-10',
      description: 'ุทูุจ ุชุชุจุน ุฏูุน ุงูุฅูุฌุงุฑ ูููุญุฏุฉ ุฑูู 12 ูู ูุฌุชูุน ุงูุนุฑูุณ.'
    }
  };
  
  const requestData = mockRequests[requestNumber];
  
  if (!requestData) {
    return reply.status(404).send({ error: "Request not found" });
  }
  
  return reply.send({
    status: 'success',
    data: requestData
  });
});


// New Endpoint to Initiate Outbound Calls
fastify.post("/make-call", async (request, reply) => {
  const { to } = request.body;

  if (!to) {
    return reply
      .status(400)
      .send({ error: "Missing 'to' phone number in request body." });
  }

  try {
    const call = await twilioClient.calls.create({
      url: `${WEBHOOK_URL}/incoming-call`, // Twilio will request this URL when the call is answered
      to: to,
      from: TWILIO_PHONE_NUMBER,
      // Optionally, you can add other parameters here
    });

    console.log(`Initiated call to ${to}. Call SID: ${call.sid}`);
    return reply.send({
      message: `Call initiated to ${to}`,
      callSid: call.sid,
    });
  } catch (error) {
    console.error("โ๏ธ Error initiating call:", error);
    return reply.status(500).send({ error: "Failed to initiate call." });
  }
});

fastify.listen({ port: PORT, host: '0.0.0.0' }, (err, address) => {
  if (err) {
    console.error("Error starting server:", err);
    process.exit(1);
  }
  console.log(`Server is listening on ${address}`);
});
